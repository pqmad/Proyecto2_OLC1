/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,9],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,10,11,21,82,83,84,85,86],$V9=[1,21],$Va=[1,23],$Vb=[1,24],$Vc=[1,35],$Vd=[1,29],$Ve=[1,34],$Vf=[1,28],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,36],$Vl=[1,37],$Vm=[5,10,11,12,19,21,33,34,35,42,43,44,45,46,48,54,55,56,59,61,63,76,77,78,79,80,81,82,83,84,85,86],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[13,14,23,52,53,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VE=[1,71],$VF=[13,23],$VG=[1,75],$VH=[13,14,23,60,74,75],$VI=[1,115],$VJ=[1,113],$VK=[1,114],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,124],$VP=[1,120],$VQ=[1,121],$VR=[1,119],$VS=[1,123],$VT=[1,122],$VU=[13,14,23,52,53,60,62,63,68,69,70,71,72,73,74,75],$VV=[13,14,23,52,53,60,62,63,64,65,67,68,69,70,71,72,73,74,75],$VW=[13,14,23,60,68,69,70,71,72,73,74,75],$VX=[11,19,33,35,42,43,44,45,46,48,54,55,56,59,61,82,83,84,85,86],$VY=[11,12,34,63,76,77,78,79,80,81],$VZ=[1,190],$V_=[1,191],$V$=[19,59,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPINICIO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"METFUNC":8,"CAMBIARVALOR_VAR":9,"exec":10,"identificador":11,"parenA":12,"parenC":13,"ptcoma":14,"LISTA_VALORES":15,"TIPO":16,"llaveA":17,"OPCIONESCUERPO":18,"llaveC":19,"LISTAPARAMETROS":20,"void":21,"LLAMADA":22,"coma":23,"VALORES":24,"EXPRESION":25,"PARAMETROS":26,"CUERPOMETFUNC":27,"CICLOS":28,"FUNCIONES":29,"INCRE_DECRE":30,"SENTENCIATRANS":31,"IMPRIMIR":32,"toLower":33,"cadenatexto":34,"toUpper":35,"WHILEC":36,"ELSEC":37,"IFC":38,"FORC":39,"SWITCHC":40,"DOWHILEC":41,"break":42,"continue":43,"return":44,"print":45,"if":46,"else":47,"for":48,"FOR_DECAS":49,"FOR_ACT":50,"signoigual":51,"masmas":52,"menosmenos":53,"while":54,"do":55,"switch":56,"LISTA_CASOS":57,"CASOS":58,"case":59,"dospuntos":60,"default":61,"suma":62,"resta":63,"multi":64,"division":65,"exponente":66,"modulo":67,"igualacion":68,"diferenciacion":69,"menor":70,"menorigual":71,"mayor":72,"mayorigual":73,"or":74,"and":75,"not":76,"entero":77,"true":78,"false":79,"decimal":80,"caracter":81,"Double":82,"String":83,"Boolean":84,"int":85,"Char":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"exec",11:"identificador",12:"parenA",13:"parenC",14:"ptcoma",17:"llaveA",19:"llaveC",21:"void",23:"coma",33:"toLower",34:"cadenatexto",35:"toUpper",42:"break",43:"continue",44:"return",45:"print",46:"if",47:"else",48:"for",51:"signoigual",52:"masmas",53:"menosmenos",54:"while",55:"do",56:"switch",59:"case",60:"dospuntos",61:"default",62:"suma",63:"resta",64:"multi",65:"division",66:"exponente",67:"modulo",68:"igualacion",69:"diferenciacion",70:"menor",71:"menorigual",72:"mayor",73:"mayorigual",74:"or",75:"and",76:"not",77:"entero",78:"true",79:"false",80:"decimal",81:"caracter",82:"Double",83:"String",84:"Boolean",85:"int",86:"Char"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,5],[6,6],[8,7],[8,8],[8,7],[8,8],[22,5],[22,4],[15,3],[15,1],[24,1],[20,3],[20,1],[26,2],[18,2],[18,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[29,1],[29,5],[29,5],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[31,2],[31,2],[31,2],[32,5],[38,7],[37,11],[39,10],[49,1],[49,1],[50,3],[50,2],[50,2],[36,7],[41,9],[40,7],[57,2],[57,1],[58,4],[58,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[16,1],[16,1],[16,1],[16,1],[16,1],[7,3],[7,5],[9,4],[30,3],[30,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 21: case 54:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 16: case 19: case 22:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 33: case 34: case 35: case 36: case 37: case 38: case 46: case 47:
this.$ = $$[$0];
break;
case 7:
this.$ = INSTRUCCION.Exec($$[$0-3], null,this._$.first_line, (this._$.first_column+1));
break;
case 8:
this.$ = INSTRUCCION.Exec($$[$0-4], $$[$0-2],this._$.first_line, (this._$.first_column+1));
break;
case 9:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-6],$$[$0-5], null, $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 10:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-7],$$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 11:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-5], null, $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 12:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 13:
this.$ = INSTRUCCION.Llamadas($$[$0-4], $$[$0-2],this._$.first_line, (this._$.first_column+1));
break;
case 14:
this.$ = INSTRUCCION.Llamadas($$[$0-3], null,this._$.first_line, (this._$.first_column+1));
break;
case 15: case 18:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 17:
this.$=$$[$0]
break;
case 20:
this.$ = INSTRUCCION.nuevaPARAMETRO($$[$0],$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 39: case 40: case 41:
this.$ = $$[$0-1];
break;
case 42:
 this.$ = new INSTRUCCION.nuevoPRINT($$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 43:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 44:
this.$ = new INSTRUCCION.nuevoElse($$[$0-8], $$[$0-5],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 45:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-7],$$[$0-6], $$[$0-4],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 48:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], $$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 49:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 50:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 51:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 52:
this.$ = new INSTRUCCION.nuevoDOWhile($$[$0-2], $$[$0-6] , this._$.first_line,(this._$.first_column+1));
break;
case 53:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4],$$[$0-1], this._$.first_line,(this._$.first_column+1));
break;
case 55:
 this.$ = INSTRUCCION.nuevoListaCasos($$[$0]);
break;
case 56:
 this.$ = INSTRUCCION.nuevoCaso($$[$0-2],$$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
case 57:
 this.$ = INSTRUCCION.nuevoCasoDef($$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
case 58:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 59:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 60:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 61:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 62:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION, this._$.first_line, (this._$.first_column+1));
break;
case 63:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION, this._$.first_line, (this._$.first_column+1));
break;
case 64:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA, this._$.first_line, (this._$.first_column+1));
break;
case 65:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO, this._$.first_line, (this._$.first_column+1));
break;
case 66:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0],TIPO_OPERACION.NEGACION, this._$.first_line, (this._$.first_column+1));
break;
case 67:
this.$=$$[$0-1]
break;
case 68:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 69:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 70:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 71:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 72:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 73:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 74:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 75:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 76:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 77:
this.$ = INSTRUCCION.nuevoVALOR( Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1));
break;
case 78:
this.$ = INSTRUCCION.nuevoVALOR( Boolean($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line, (this._$.first_column+1));
break;
case 79:
this.$ = INSTRUCCION.nuevoVALOR( Boolean($$[$0]), TIPO_VALOR.BANDERA,this._$.first_line, (this._$.first_column+1));
break;
case 80:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.CADENA, this._$.first_line, (this._$.first_column+1));
break;
case 81:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1));
break;
case 82:
this.$ = INSTRUCCION.nuevoVALOR(Number($$[$0]), TIPO_VALOR.DECIMAL,this._$.first_line, (this._$.first_column+1));
break;
case 83:
this.$ = INSTRUCCION.nuevoVALOR($$[$0], TIPO_VALOR.CARACTER,this._$.first_line, (this._$.first_column+1));
break;
case 84:
this.$ = TIPO_DATO.DECIMAL
break;
case 85:
this.$ = TIPO_DATO.CADENA
break;
case 86:
this.$ = TIPO_DATO.BANDERA
break;
case 87:
this.$ = TIPO_DATO.ENTERO
break;
case 88:
this.$ = TIPO_DATO.CARACTER
break;
case 89:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-1], null, $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 90:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line, (this._$.first_column+1));
break;
case 91:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 92:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-2], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 93:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-2], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,11:$V1,16:8,21:$V2,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:$V0,11:$V1,16:8,21:$V2,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),{11:[1,18]},{11:[1,19]},{11:[1,20]},{51:$V9},{11:[2,84]},{11:[2,85]},{11:[2,86]},{11:[2,87]},{11:[2,88]},{1:[2,1]},o($V8,[2,2]),{12:[1,22]},{12:[1,25],14:$Va,51:$Vb},{12:[1,26]},{11:$Vc,12:$Vd,25:27,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,13:[1,38],15:39,24:40,25:41,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($Vm,[2,89]),{11:$Vc,12:$Vd,25:42,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{13:[1,43],16:46,20:44,26:45,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[1,47],16:46,20:48,26:45,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{14:[1,49],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{11:$Vc,12:$Vd,25:66,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:67,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:68,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,83]),{14:[1,69]},{13:[1,70],23:$VE},o($VF,[2,16]),o($VF,[2,17],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC}),{14:[1,72],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{17:[1,73]},{13:[1,74],23:$VG},o($VF,[2,19]),{11:[1,76]},{17:[1,77]},{13:[1,78],23:$VG},o($Vm,[2,91]),o($VD,[2,58]),o($VD,[2,59]),{11:$Vc,12:$Vd,25:79,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:80,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:81,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:82,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:83,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:84,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:85,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:86,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:87,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:88,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:89,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:90,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:91,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:92,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($VD,[2,66]),{13:[1,93],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($VH,[2,76],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($V8,[2,7]),{14:[1,94]},{11:$Vc,12:$Vd,24:95,25:41,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($Vm,[2,90]),{7:98,9:101,11:$VI,16:105,18:96,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{17:[1,125]},{16:46,26:126,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($VF,[2,20]),{7:98,9:101,11:$VI,16:105,18:127,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{17:[1,128]},o($VU,[2,60],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VU,[2,61],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VV,[2,62],{66:$Vt}),o($VV,[2,63],{66:$Vt}),o($VD,[2,64]),o($VV,[2,65],{66:$Vt}),o($VW,[2,68],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VW,[2,69],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VW,[2,70],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VW,[2,71],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VW,[2,72],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($VW,[2,73],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o([13,14,23,60,74],[2,74],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,75:$VC}),o($VH,[2,75],{52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($VD,[2,67]),o($V8,[2,8]),o($VF,[2,15]),{7:98,9:101,11:$VI,16:105,19:[1,129],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($VX,[2,22]),o($VX,[2,23]),o($VX,[2,24]),o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,29]),{11:[1,131]},o($VX,[2,33]),o($VX,[2,34]),o($VX,[2,35]),o($VX,[2,36]),o($VX,[2,37]),o($VX,[2,38]),o($VX,[2,30]),{12:[1,132]},{12:[1,133]},{12:[1,134],51:$V9,52:[1,135],53:[1,136]},{14:[1,137]},{14:[1,138]},{14:[1,139]},{12:[1,140]},{12:[1,141]},{12:[1,142]},{12:[1,143]},{17:[1,144]},{12:[1,145]},{7:98,9:101,11:$VI,16:105,18:146,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($VF,[2,18]),{7:98,9:101,11:$VI,16:105,19:[1,147],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{7:98,9:101,11:$VI,16:105,18:148,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($V8,[2,9]),o($VX,[2,21]),{14:$Va,51:$Vb},{34:[1,149]},{34:[1,150]},{11:$Vc,12:$Vd,13:[1,152],15:151,24:40,25:41,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{14:[1,153]},{14:[1,154]},o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),{11:$Vc,12:$Vd,25:155,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{11:$Vc,12:$Vd,25:156,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{7:158,9:159,11:$V1,16:105,49:157,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{11:$Vc,12:$Vd,25:160,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{7:98,9:101,11:$VI,16:105,18:161,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{11:$Vc,12:$Vd,25:162,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{7:98,9:101,11:$VI,16:105,19:[1,163],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($V8,[2,11]),{7:98,9:101,11:$VI,16:105,19:[1,164],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[1,165]},{13:[1,166]},{13:[1,167],23:$VE},{14:[1,168]},o($VX,[2,92]),o($VX,[2,93]),{13:[1,169],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{13:[1,170],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{11:$Vc,12:$Vd,25:171,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($VY,[2,46]),o($VY,[2,47]),{13:[1,172],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{7:98,9:101,11:$VI,16:105,19:[1,173],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[1,174],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},o($V8,[2,10]),o($V8,[2,12]),{14:[1,175]},{14:[1,176]},{14:[1,177]},o($VX,[2,14]),{17:[1,178]},{17:[1,179]},{14:[1,180],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{17:[1,181]},{54:[1,182]},{14:[1,183]},o($VX,[2,31]),o($VX,[2,32]),o($VX,[2,13]),{7:98,9:101,11:$VI,16:105,18:184,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{7:98,9:101,11:$VI,16:105,18:185,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{11:[1,187],50:186},{57:188,58:189,59:$VZ,61:$V_},{12:[1,192]},o($VX,[2,42]),{7:98,9:101,11:$VI,16:105,19:[1,193],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{7:98,9:101,11:$VI,16:105,19:[1,194],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[1,195]},{51:[1,196],52:[1,197],53:[1,198]},{19:[1,199],58:200,59:$VZ,61:$V_},o($V$,[2,55]),{11:$Vc,12:$Vd,25:201,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{60:[1,202]},{11:$Vc,12:$Vd,25:203,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},o($VX,[2,51]),o($VX,[2,43],{47:[1,204]}),{17:[1,205]},{11:$Vc,12:$Vd,25:206,34:$Ve,63:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl},{13:[2,49]},{13:[2,50]},o($VX,[2,53]),o($V$,[2,54]),{52:$Vn,53:$Vo,60:[1,207],62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{7:98,9:101,11:$VI,16:105,18:208,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[1,209],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{17:[1,210]},{7:98,9:101,11:$VI,16:105,18:211,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{13:[2,48],52:$Vn,53:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC},{7:98,9:101,11:$VI,16:105,18:212,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($V$,[2,57],{7:98,28:99,29:100,9:101,22:102,30:103,31:104,16:105,36:106,37:107,38:108,39:109,40:110,41:111,32:112,27:130,11:$VI,33:$VJ,35:$VK,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7}),{14:[1,213]},{7:98,9:101,11:$VI,16:105,18:214,22:102,27:97,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},{7:98,9:101,11:$VI,16:105,19:[1,215],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($V$,[2,56],{7:98,28:99,29:100,9:101,22:102,30:103,31:104,16:105,36:106,37:107,38:108,39:109,40:110,41:111,32:112,27:130,11:$VI,33:$VJ,35:$VK,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7}),o($VX,[2,52]),{7:98,9:101,11:$VI,16:105,19:[1,216],22:102,27:130,28:99,29:100,30:103,31:104,32:112,33:$VJ,35:$VK,36:106,37:107,38:108,39:109,40:110,41:111,42:$VL,43:$VM,44:$VN,45:$VO,46:$VP,48:$VQ,54:$VR,55:$VS,56:$VT,82:$V3,83:$V4,84:$V5,85:$V6,86:$V7},o($VX,[2,45]),o($VX,[2,44])],
defaultActions: {11:[2,84],12:[2,85],13:[2,86],14:[2,87],15:[2,88],16:[2,1],197:[2,49],198:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 	= require('./controller/Enums/TipoValor');
	const TIPO_DATO		= require('./controller/Enums/TipoDato'); 
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 85
break;
case 4:return 82
break;
case 5:return 84
break;
case 6:return 86
break;
case 7:return 83
break;
case 8:return 78
break;
case 9:return 79
break;
case 10:return 46
break;
case 11:return 47
break;
case 12:return 56
break;
case 13:return 59
break;
case 14:return 61
break;
case 15:return 42
break;
case 16:return 54
break;
case 17:return 48
break;
case 18:return 55
break;
case 19:return 43
break;
case 20:return 44
break;
case 21:return 21
break;
case 22:return 45
break;
case 23:return 33
break;
case 24:return 35
break;
case 25:return 'length'
break;
case 26:return 'truncate'
break;
case 27:return 'round'
break;
case 28:return 'typeof'
break;
case 29:return 'tostring'
break;
case 30:return 'tochararray'
break;
case 31:return 10
break;
case 32:return 68
break;
case 33:return 51
break;
case 34:return 69
break;
case 35:return 71
break;
case 36:return 70
break;
case 37:return 73
break;
case 38:return 72
break;
case 39:return 'interrogacion'
break;
case 40:return 60
break;
case 41:return 74
break;
case 42:return 75
break;
case 43:return 76
break;
case 44:return 12
break;
case 45:return 13
break;
case 46:return 52
break;
case 47:return 53
break;
case 48:return 66
break;
case 49:return 63
break;
case 50:return 62
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 67
break;
case 54:return 14
break;
case 55:return 17
break;
case 56:return 19
break;
case 57:return 'corcheteA'
break;
case 58:return 'corcheteC'
break;
case 59:return 23
break;
case 60:return 80;
break;
case 61:return 77;
break;
case 62:return 11
break;
case 63:return 34
break;
case 64:return 81
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\^)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}