/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,9],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,10,11,21,81,82,83,84,85],$V9=[1,21],$Va=[1,23],$Vb=[1,24],$Vc=[1,36],$Vd=[1,29],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,35],$Vm=[1,28],$Vn=[1,30],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,37],$Vs=[1,38],$Vt=[5,10,11,12,14,19,21,34,36,37,38,39,40,48,49,50,51,53,55,56,58,62,75,76,77,78,79,80,81,82,83,84,85,87,90,91,92,95,96],$Vu=[1,75],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,73],$VK=[1,74],$VL=[13,14,23,54,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VM=[1,92],$VN=[13,23],$VO=[1,96],$VP=[13,14,23,54,55,73,74],$VQ=[1,145],$VR=[1,155],$VS=[1,146],$VT=[1,147],$VU=[1,148],$VV=[1,149],$VW=[1,151],$VX=[1,152],$VY=[1,150],$VZ=[1,154],$V_=[1,153],$V$=[13,14,23,54,55,59,60,61,62,67,68,69,70,71,72,73,74],$V01=[13,14,23,54,55,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74],$V11=[13,14,23,54,55,67,68,69,70,71,72,73,74],$V21=[11,12,14,19,48,49,50,51,55,56,81,82,83,84,85,87,90,91,92,95,96],$V31=[11,12,34,36,37,38,39,40,53,58,62,75,76,77,78,79,80],$V41=[1,229],$V51=[1,230],$V61=[19,95,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPINICIO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"METFUNC":8,"CAMBIARVALOR_VAR":9,"exec":10,"identificador":11,"parenA":12,"parenC":13,"ptcoma":14,"LISTA_VALORES":15,"TIPO":16,"llaveA":17,"OPCIONESCUERPO":18,"llaveC":19,"LISTAPARAMETROS":20,"void":21,"LLAMADA":22,"coma":23,"VALORES":24,"EXPRESION":25,"PARAMETROS":26,"CUERPOMETFUNC":27,"CICLOS":28,"INCRE_DECRE":29,"SENTENCIATRANS":30,"IMPRIMIR":31,"FUNCIONES":32,"CASTEOS":33,"length":34,"SACAR_LONG":35,"toLower":36,"toUpper":37,"truncate":38,"round":39,"typeof":40,"WHILEC":41,"ELSEC":42,"IFC":43,"FORC":44,"SWITCHC":45,"DOWHILEC":46,"TERNARIOC":47,"break":48,"continue":49,"return":50,"print":51,"TIPOCASTEO":52,"tostring":53,"interrogacion":54,"dospuntos":55,"if":56,"else":57,"cadenatexto":58,"masmas":59,"menosmenos":60,"suma":61,"resta":62,"multi":63,"division":64,"exponente":65,"modulo":66,"igualacion":67,"diferenciacion":68,"menor":69,"menorigual":70,"mayor":71,"mayorigual":72,"or":73,"and":74,"not":75,"entero":76,"true":77,"false":78,"decimal":79,"caracter":80,"Double":81,"String":82,"Boolean":83,"int":84,"Char":85,"signoigual":86,"for":87,"FOR_DECAS":88,"FOR_ACT":89,"while":90,"do":91,"switch":92,"LISTA_CASOS":93,"CASOS":94,"case":95,"default":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"exec",11:"identificador",12:"parenA",13:"parenC",14:"ptcoma",17:"llaveA",19:"llaveC",21:"void",23:"coma",34:"length",36:"toLower",37:"toUpper",38:"truncate",39:"round",40:"typeof",48:"break",49:"continue",50:"return",51:"print",53:"tostring",54:"interrogacion",55:"dospuntos",56:"if",57:"else",58:"cadenatexto",59:"masmas",60:"menosmenos",61:"suma",62:"resta",63:"multi",64:"division",65:"exponente",66:"modulo",67:"igualacion",68:"diferenciacion",69:"menor",70:"menorigual",71:"mayor",72:"mayorigual",73:"or",74:"and",75:"not",76:"entero",77:"true",78:"false",79:"decimal",80:"caracter",81:"Double",82:"String",83:"Boolean",84:"int",85:"Char",86:"signoigual",87:"for",90:"while",91:"do",92:"switch",95:"case",96:"default"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,5],[6,6],[8,7],[8,8],[8,7],[8,8],[22,5],[22,4],[15,3],[15,1],[24,1],[20,3],[20,1],[26,2],[18,2],[18,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[32,1],[32,4],[32,4],[32,4],[32,4],[32,4],[32,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,2],[30,2],[30,2],[31,5],[31,4],[33,4],[33,4],[47,8],[43,7],[42,11],[35,1],[35,1],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,5],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[16,1],[16,1],[16,1],[16,1],[16,1],[52,1],[52,1],[52,1],[7,3],[7,5],[9,4],[29,3],[29,3],[44,10],[88,1],[88,1],[89,3],[89,2],[89,2],[41,7],[46,9],[45,7],[93,2],[93,1],[94,4],[94,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 21: case 106:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 16: case 19: case 22:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 98: case 99:
this.$ = $$[$0];
break;
case 7:
this.$ = INSTRUCCION.Exec($$[$0-3], null,this._$.first_line, (this._$.first_column+1));
break;
case 8:
this.$ = INSTRUCCION.Exec($$[$0-4], $$[$0-2],this._$.first_line, (this._$.first_column+1));
break;
case 9:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-6],$$[$0-5], null, $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 10:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-7],$$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 11:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-5], null, $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 12:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 13:
this.$ = INSTRUCCION.Llamadas($$[$0-4], $$[$0-2],this._$.first_line, (this._$.first_column+1));
break;
case 14:
this.$ = INSTRUCCION.Llamadas($$[$0-3], null,this._$.first_line, (this._$.first_column+1));
break;
case 15: case 18:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 17:
this.$=$$[$0]
break;
case 20:
this.$ = INSTRUCCION.nuevaPARAMETRO($$[$0],$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 31:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH, this._$.first_line, (this._$.first_column+1));
break;
case 32:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LOWER, this._$.first_line, (this._$.first_column+1));
break;
case 33:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.UPPER, this._$.first_line, (this._$.first_column+1));
break;
case 34:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE, this._$.first_line, (this._$.first_column+1));
break;
case 35:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND, this._$.first_line, (this._$.first_column+1));
break;
case 36:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF, this._$.first_line, (this._$.first_column+1));
break;
case 44: case 45: case 46:
this.$ = $$[$0-1];
break;
case 47:
 this.$ = new INSTRUCCION.nuevoPRINT($$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 48:
 this.$ = new INSTRUCCION.nuevoPRINT("", this._$.first_line, (this._$.first_column+1));
break;
case 49:
 this.$ = new INSTRUCCION.nuevoCASTEO($$[$0-2],$$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 50:
 this.$ = new INSTRUCCION.nuevoCASTEO(TIPO_DATO.CADENA,$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 51:
this.$ = INSTRUCCION.nuevoTernario($$[$0-7],$$[$0-5],$$[$0-3],this._$.first_line,this._$.first_column+1);
break;
case 52:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 53:
this.$ = new INSTRUCCION.nuevoElse($$[$0-8], $$[$0-5],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 54: case 80:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.CADENA, this._$.first_line, (this._$.first_column+1));
break;
case 55: case 81:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1));
break;
case 56:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 57:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 58:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 59:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 60:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION, this._$.first_line, (this._$.first_column+1));
break;
case 61:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION, this._$.first_line, (this._$.first_column+1));
break;
case 62:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA, this._$.first_line, (this._$.first_column+1));
break;
case 63:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO, this._$.first_line, (this._$.first_column+1));
break;
case 64:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0],TIPO_OPERACION.NEGACION, this._$.first_line, (this._$.first_column+1));
break;
case 65:
this.$ = $$[$0-1]
break;
case 66:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 67:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 68:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 69:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 70:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 71:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 72:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 73:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 74:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 75:
this.$ = INSTRUCCION.nuevoOperacionTernario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 76:
this.$=$$[$0];
break;
case 77:
this.$ = INSTRUCCION.nuevoVALOR( Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1));
break;
case 78:
this.$ = INSTRUCCION.nuevoVALOR( Boolean($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line, (this._$.first_column+1));
break;
case 79:
this.$ = INSTRUCCION.nuevoVALOR( Boolean($$[$0]), TIPO_VALOR.BANDERA,this._$.first_line, (this._$.first_column+1));
break;
case 82:
this.$ = INSTRUCCION.nuevoVALOR(Number($$[$0]), TIPO_VALOR.DECIMAL,this._$.first_line, (this._$.first_column+1));
break;
case 83:
this.$ = INSTRUCCION.nuevoVALOR($$[$0], TIPO_VALOR.CARACTER,this._$.first_line, (this._$.first_column+1));
break;
case 84: case 89:
this.$ = TIPO_DATO.DECIMAL
break;
case 85:
this.$ = TIPO_DATO.CADENA
break;
case 86:
this.$ = TIPO_DATO.BANDERA
break;
case 87: case 90:
this.$ = TIPO_DATO.ENTERO
break;
case 88: case 91:
this.$ = TIPO_DATO.CARACTER
break;
case 92:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-1], null, $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 93:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line, (this._$.first_column+1));
break;
case 94:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 95:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-2], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 96:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-2], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 97:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-7],$$[$0-6], $$[$0-4],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 100:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], $$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 101:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 102:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 103:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 104:
this.$ = new INSTRUCCION.nuevoDOWhile($$[$0-2], $$[$0-6] , this._$.first_line,(this._$.first_column+1));
break;
case 105:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4],$$[$0-1], this._$.first_line,(this._$.first_column+1));
break;
case 107:
 this.$ = INSTRUCCION.nuevoListaCasos($$[$0]);
break;
case 108:
 this.$ = INSTRUCCION.nuevoCaso($$[$0-2],$$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
case 109:
 this.$ = INSTRUCCION.nuevoCasoDef($$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,11:$V1,16:8,21:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:$V0,11:$V1,16:8,21:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),{11:[1,18]},{11:[1,19]},{11:[1,20]},{86:$V9},{11:[2,84]},{11:[2,85]},{11:[2,86]},{11:[2,87]},{11:[2,88]},{1:[2,1]},o($V8,[2,2]),{12:[1,22]},{12:[1,25],14:$Va,86:$Vb},{12:[1,26]},{11:$Vc,12:$Vd,25:27,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,13:[1,47],15:48,24:49,25:50,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vt,[2,92]),{11:$Vc,12:$Vd,25:51,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:[1,52],16:55,20:53,26:54,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7},{13:[1,56],16:55,20:57,26:54,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7},{14:[1,58],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{11:$Vc,12:$Vd,25:76,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:77,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,52:78,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:[1,79],84:[1,80],85:[1,81]},{11:$Vc,12:$Vd,25:82,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,30]),{12:[1,83]},{12:[1,84]},{12:[1,85]},{12:[1,86]},{12:[1,87]},{12:[1,88]},{12:[1,89]},{14:[1,90]},{13:[1,91],23:$VM},o($VN,[2,16]),o($VN,[2,17],{54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{14:[1,93],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{17:[1,94]},{13:[1,95],23:$VO},o($VN,[2,19]),{11:[1,97]},{17:[1,98]},{13:[1,99],23:$VO},o($Vt,[2,94]),o($VL,[2,56]),o($VL,[2,57]),{11:$Vc,12:$Vd,25:100,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:101,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:102,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:103,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:104,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:105,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:106,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:107,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:108,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:109,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:110,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:111,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:112,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:113,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:114,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($VL,[2,64]),{13:[1,115],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,116]},{13:[2,89]},{13:[2,90]},{13:[2,91]},o($VP,[2,74],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),{11:[1,119],35:117,58:[1,118]},{11:$Vc,12:$Vd,25:120,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:121,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:122,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:123,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:124,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:125,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($V8,[2,7]),{14:[1,126]},{11:$Vc,12:$Vd,24:127,25:50,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vt,[2,93]),{7:130,9:132,11:$VQ,12:$VR,16:137,18:128,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{17:[1,156]},{16:55,26:157,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7},o($VN,[2,20]),{7:130,9:132,11:$VQ,12:$VR,16:137,18:158,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{17:[1,159]},o($V$,[2,58],{63:$Vz,64:$VA,65:$VB,66:$VC}),o($V$,[2,59],{63:$Vz,64:$VA,65:$VB,66:$VC}),o($V01,[2,60],{65:$VB}),o($V01,[2,61],{65:$VB}),o($VL,[2,62]),o($V01,[2,63],{65:$VB}),o($V11,[2,66],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($V11,[2,67],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($V11,[2,68],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($V11,[2,69],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($V11,[2,70],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o($V11,[2,71],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),o([13,14,23,54,55,73],[2,72],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,74:$VK}),o($VP,[2,73],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),{54:$Vu,55:[1,160],59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($VL,[2,65]),{11:$Vc,12:$Vd,25:161,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:[1,162]},{13:[2,54]},{13:[2,55]},{13:[1,163],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,164],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,165],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,166],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,167],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,168],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($V8,[2,8]),o($VN,[2,15]),{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,169],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V21,[2,22]),o($V21,[2,23]),o($V21,[2,24]),o($V21,[2,25]),o($V21,[2,26]),o($V21,[2,27]),o($V21,[2,28]),o($V21,[2,29]),{11:[1,171]},o($V21,[2,37]),o($V21,[2,38]),o($V21,[2,39]),o($V21,[2,40]),o($V21,[2,41]),o($V21,[2,42]),o($V21,[2,43]),{12:[1,172],59:[1,173],60:[1,174],86:$V9},{14:[1,175]},{14:[1,176]},{14:[1,177]},{12:[1,178]},{12:[1,179]},{12:[1,180]},{12:[1,181]},{12:[1,182]},{17:[1,183]},{11:$Vc,12:$Vd,25:184,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{7:130,9:132,11:$VQ,12:$VR,16:137,18:185,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($VN,[2,18]),{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,186],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{7:130,9:132,11:$VQ,12:$VR,16:137,18:187,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{11:$Vc,12:$Vd,25:188,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($VL,[2,49]),o($VL,[2,31]),o($VL,[2,32]),o($VL,[2,33]),o($VL,[2,34]),o($VL,[2,35]),o($VL,[2,36]),o($VL,[2,50]),o($V8,[2,9]),o($V21,[2,21]),{14:$Va,86:$Vb},{11:$Vc,12:$Vd,13:[1,190],15:189,24:49,25:50,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{14:[1,191]},{14:[1,192]},o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),{11:$Vc,12:$Vd,13:[1,194],25:193,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:195,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{11:$Vc,12:$Vd,25:196,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{7:198,9:199,11:$V1,16:137,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,88:197},{11:$Vc,12:$Vd,25:200,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{7:130,9:132,11:$VQ,12:$VR,16:137,18:201,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{13:[1,202],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,203],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V8,[2,11]),{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,204],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o([13,14,23,54,55],[2,75],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{13:[1,205],23:$VM},{14:[1,206]},o($V21,[2,95]),o($V21,[2,96]),{13:[1,207],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{14:[1,208]},{13:[1,209],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{13:[1,210],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{11:$Vc,12:$Vd,25:211,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($V31,[2,98]),o($V31,[2,99]),{13:[1,212],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,213],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{54:[1,214]},o($V8,[2,10]),o($V8,[2,12]),{14:[1,215]},o($V21,[2,14]),{14:[1,216]},o($V21,[2,48]),{17:[1,217]},{17:[1,218]},{14:[1,219],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{17:[1,220]},{90:[1,221]},{7:130,9:132,11:$VQ,12:$VR,16:137,18:222,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V21,[2,13]),o($V21,[2,47]),{7:130,9:132,11:$VQ,12:$VR,16:137,18:223,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{7:130,9:132,11:$VQ,12:$VR,16:137,18:224,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{11:[1,226],89:225},{93:227,94:228,95:$V41,96:$V51},{12:[1,231]},{7:130,9:132,11:$VQ,12:$VR,16:137,22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,55:[1,232],56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,233],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,234],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{13:[1,235]},{59:[1,237],60:[1,238],86:[1,236]},{19:[1,239],94:240,95:$V41,96:$V51},o($V61,[2,107]),{11:$Vc,12:$Vd,25:241,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{55:[1,242]},{11:$Vc,12:$Vd,25:243,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{7:130,9:132,11:$VQ,12:$VR,16:137,18:244,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V21,[2,103]),o($V21,[2,52],{57:[1,245]}),{17:[1,246]},{11:$Vc,12:$Vd,25:247,32:31,33:39,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,53:$Vk,58:$Vl,62:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:[2,101]},{13:[2,102]},o($V21,[2,105]),o($V61,[2,106]),{54:$Vu,55:[1,248],59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:130,9:132,11:$VQ,12:$VR,16:137,18:249,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{13:[1,250],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:130,9:132,11:$VQ,12:$VR,14:[1,251],16:137,22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{17:[1,252]},{7:130,9:132,11:$VQ,12:$VR,16:137,18:253,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{13:[2,100],54:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:130,9:132,11:$VQ,12:$VR,16:137,18:254,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V61,[2,109],{7:130,28:131,9:132,22:133,29:134,30:135,31:136,16:137,41:138,42:139,43:140,44:141,45:142,46:143,47:144,27:170,11:$VQ,12:$VR,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_}),{14:[1,255]},o($V21,[2,51]),{7:130,9:132,11:$VQ,12:$VR,16:137,18:256,22:133,27:129,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,257],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V61,[2,108],{7:130,28:131,9:132,22:133,29:134,30:135,31:136,16:137,41:138,42:139,43:140,44:141,45:142,46:143,47:144,27:170,11:$VQ,12:$VR,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_}),o($V21,[2,104]),{7:130,9:132,11:$VQ,12:$VR,16:137,19:[1,258],22:133,27:170,28:131,29:134,30:135,31:136,41:138,42:139,43:140,44:141,45:142,46:143,47:144,48:$VS,49:$VT,50:$VU,51:$VV,56:$VW,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,87:$VX,90:$VY,91:$VZ,92:$V_},o($V21,[2,97]),o($V21,[2,53])],
defaultActions: {11:[2,84],12:[2,85],13:[2,86],14:[2,87],15:[2,88],16:[2,1],79:[2,89],80:[2,90],81:[2,91],118:[2,54],119:[2,55],237:[2,101],238:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 	= require('./controller/Enums/TipoValor');
	const TIPO_DATO		= require('./controller/Enums/TipoDato'); 
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 84
break;
case 4:return 81
break;
case 5:return 83
break;
case 6:return 85
break;
case 7:return 82
break;
case 8:return 77
break;
case 9:return 78
break;
case 10:return 56
break;
case 11:return 57
break;
case 12:return 92
break;
case 13:return 95
break;
case 14:return 96
break;
case 15:return 48
break;
case 16:return 90
break;
case 17:return 87
break;
case 18:return 91
break;
case 19:return 49
break;
case 20:return 50
break;
case 21:return 21
break;
case 22:return 51
break;
case 23:return 36
break;
case 24:return 37
break;
case 25:return 34
break;
case 26:return 38
break;
case 27:return 39
break;
case 28:return 40
break;
case 29:return 53
break;
case 30:return 'tochararray'
break;
case 31:return 10
break;
case 32:return 67
break;
case 33:return 86
break;
case 34:return 68
break;
case 35:return 70
break;
case 36:return 69
break;
case 37:return 72
break;
case 38:return 71
break;
case 39:return 54
break;
case 40:return 55
break;
case 41:return 73
break;
case 42:return 74
break;
case 43:return 75
break;
case 44:return 12
break;
case 45:return 13
break;
case 46:return 59
break;
case 47:return 60
break;
case 48:return 65
break;
case 49:return 62
break;
case 50:return 61
break;
case 51:return 63
break;
case 52:return 64
break;
case 53:return 66
break;
case 54:return 14
break;
case 55:return 17
break;
case 56:return 19
break;
case 57:return 'corcheteA'
break;
case 58:return 'corcheteC'
break;
case 59:return 23
break;
case 60:return 79;
break;
case 61:return 76;
break;
case 62:return 11
break;
case 63:return 58
break;
case 64:return 80
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\^)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}