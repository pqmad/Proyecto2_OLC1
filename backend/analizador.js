/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[1,13],$V3=[1,12],$V4=[1,22],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[2,5,10,11,21,29,47,48,49,50,51],$Vb=[1,28],$Vc=[2,5,10,11,12,19,21,29,44,47,48,49,50,51,56,60,62,64,67,69,71,78,80,81,82,83,84,86,87,88,89,90,92,94,105,106,107,108,109,110],$Vd=[1,30],$Ve=[1,32],$Vf=[11,27,31],$Vg=[1,35],$Vh=[1,36],$Vi=[1,46],$Vj=[1,42],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,52],$Vt=[1,41],$Vu=[1,43],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,53],$Vz=[1,54],$VA=[1,77],$VB=[1,90],$VC=[1,92],$VD=[1,96],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,91],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[13,14,19,23,28,30,31,68,91,93,94,95,96,97,98,99,100,101,102,103,104],$VR=[2,134],$VS=[2,135],$VT=[2,144],$VU=[1,107],$VV=[1,105],$VW=[1,106],$VX=[2,139],$VY=[1,122],$VZ=[13,19,23],$V_=[1,126],$V$=[13,23],$V01=[13,14,19,23,28,68,91,103,104],$V11=[1,164],$V21=[1,173],$V31=[1,189],$V41=[1,196],$V51=[1,194],$V61=[1,198],$V71=[1,197],$V81=[1,195],$V91=[1,190],$Va1=[1,191],$Vb1=[1,192],$Vc1=[1,193],$Vd1=[13,14,19,23,28,30,31,68,91,93,94,99,100,101,102,103,104],$Ve1=[13,14,19,23,28,30,31,68,91,93,94,95,96,98,99,100,101,102,103,104],$Vf1=[13,14,19,23,28,30,31,68,91,99,100,101,102,103,104],$Vg1=[11,12,19,29,44,47,48,49,50,51,56,60,62,64,67,69,71,78,80,81,82,83,84,86,87,88,89,90,92,94,105,106,107,108,109,110],$Vh1=[30,31,91,93,94,95,96,97,98,99,100,101,102,103,104],$Vi1=[13,14,19,23,28,68,91],$Vj1=[2,136],$Vk1=[1,256],$Vl1=[11,12,44,78,80,81,82,83,84,90,92,94,105,106,107,108,109,110],$Vm1=[2,137],$Vn1=[1,317],$Vo1=[1,318],$Vp1=[1,328],$Vq1=[19,67,69],$Vr1=[11,12,19,29,44,47,48,49,50,51,56,60,62,64,67,69,71,74,78,80,81,82,83,84,86,87,88,89,90,92,94,105,106,107,108,109,110];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPINICIO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"METFUNC":8,"CAMBIARVALOR_VAR":9,"exec":10,"identificador":11,"parenA":12,"parenC":13,"ptcoma":14,"LISTA_VALORES":15,"TIPO":16,"llaveA":17,"OPCIONESCUERPO":18,"llaveC":19,"LISTAPARAMETROS":20,"void":21,"LLAMADA":22,"coma":23,"VALORES":24,"EXPRESION":25,"PARAMETROS":26,"corcheteA":27,"corcheteC":28,"list":29,"menor":30,"mayor":31,"CUERPOMETFUNC":32,"CICLOS":33,"INCRE_DECRE":34,"SENTENCIATRANS":35,"IMPRIMIR":36,"signoigual":37,"DEC_VECTOR":38,"DEC_LISTA":39,"CAMBIARVALOR_VECTOR":40,"CAMBIARVALOR_LISTA":41,"AGREGAR_LISTA":42,"nnew":43,"tochararray":44,"punto":45,"add":46,"Double":47,"String":48,"Boolean":49,"int":50,"Char":51,"TIPOCASTEO":52,"masmas":53,"menosmenos":54,"FORC":55,"for":56,"FOR_DECAS":57,"FOR_ACT":58,"WHILEC":59,"while":60,"DOWHILEC":61,"do":62,"SWITCHC":63,"switch":64,"LISTA_CASOS":65,"CASOS":66,"case":67,"dospuntos":68,"default":69,"ELSEIFC":70,"if":71,"LISTA_ELSEIF":72,"UNELSEIF":73,"else":74,"IFC":75,"FUNCIONES":76,"CASTEOS":77,"length":78,"SACAR_LONG":79,"toLower":80,"toUpper":81,"truncate":82,"round":83,"typeof":84,"TERNARIOC":85,"break":86,"continue":87,"return":88,"print":89,"tostring":90,"interrogacion":91,"cadenatexto":92,"suma":93,"resta":94,"multi":95,"division":96,"exponente":97,"modulo":98,"igualacion":99,"diferenciacion":100,"menorigual":101,"mayorigual":102,"or":103,"and":104,"not":105,"entero":106,"true":107,"false":108,"decimal":109,"caracter":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"exec",11:"identificador",12:"parenA",13:"parenC",14:"ptcoma",17:"llaveA",19:"llaveC",21:"void",23:"coma",27:"corcheteA",28:"corcheteC",29:"list",30:"menor",31:"mayor",37:"signoigual",43:"nnew",44:"tochararray",45:"punto",46:"add",47:"Double",48:"String",49:"Boolean",50:"int",51:"Char",53:"masmas",54:"menosmenos",56:"for",60:"while",62:"do",64:"switch",67:"case",68:"dospuntos",69:"default",71:"if",74:"else",78:"length",80:"toLower",81:"toUpper",82:"truncate",83:"round",84:"typeof",86:"break",87:"continue",88:"return",89:"print",90:"tostring",91:"interrogacion",92:"cadenatexto",93:"suma",94:"resta",95:"multi",96:"division",97:"exponente",98:"modulo",99:"igualacion",100:"diferenciacion",101:"menorigual",102:"mayorigual",103:"or",104:"and",105:"not",106:"entero",107:"true",108:"false",109:"decimal",110:"caracter"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,5],[6,6],[6,2],[8,7],[8,8],[8,7],[8,8],[8,6],[8,7],[8,6],[8,7],[22,4],[22,3],[15,3],[15,1],[24,1],[20,3],[20,1],[26,2],[26,4],[26,5],[18,2],[18,1],[18,2],[32,1],[32,1],[32,1],[32,2],[32,2],[32,1],[32,1],[7,3],[7,5],[7,1],[7,1],[9,4],[9,1],[9,1],[9,1],[38,11],[38,9],[40,7],[39,12],[39,11],[41,9],[42,7],[16,1],[16,1],[16,1],[16,1],[16,1],[52,1],[52,1],[52,1],[34,2],[34,2],[55,10],[55,9],[57,1],[57,1],[58,3],[58,2],[58,2],[59,7],[59,6],[61,9],[61,8],[63,7],[65,2],[65,1],[66,4],[66,3],[66,3],[66,2],[70,8],[70,7],[72,2],[72,1],[73,8],[73,4],[73,7],[73,3],[75,7],[75,6],[76,1],[76,4],[76,4],[76,4],[76,4],[76,4],[76,4],[76,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[35,2],[35,2],[35,2],[35,3],[36,5],[36,4],[77,4],[77,4],[85,5],[79,1],[79,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[25,4],[25,6],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var a={'errores':lista_Errores,'arbol':$$[$0-1]}; lista_Errores=[]; return a;
break;
case 2: case 28: case 75: case 83:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 21: case 24: case 29:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 31: case 32: case 33: case 36: case 37: case 40: case 41: case 43: case 44: case 45: case 65: case 66: case 91: case 99: case 100: case 101: case 102: case 103: case 104:
this.$ = $$[$0];
break;
case 7:
this.$ = INSTRUCCION.Exec($$[$0-3], null,this._$.first_line, (this._$.first_column+1));
break;
case 8:
this.$ = INSTRUCCION.Exec($$[$0-4], $$[$0-2],this._$.first_line, (this._$.first_column+1));
break;
case 9:
this.$ = ""; var nuevo=new ERRORES(TIPO_ERROR.SINTACTICO,"Error recuperado con: "+yytext,this._$.first_line, (this._$.first_column+1));lista_Errores.push(nuevo);
break;
case 10:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-6],$$[$0-5], null, $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 11:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-7],$$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 12:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-5], null, $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 13:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 14:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-5],$$[$0-4], null, [], this._$.first_line, (this._$.first_column+1));
break;
case 15:
this.$ = INSTRUCCION.nuevaFUNCION($$[$0-6],$$[$0-5], $$[$0-3], [], this._$.first_line, (this._$.first_column+1));
break;
case 16:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-4], null, [], this._$.first_line,(this._$.first_column+1));
break;
case 17:
this.$ = INSTRUCCION.nuevaMETODO($$[$0-5], $$[$0-3], [], this._$.first_line, (this._$.first_column+1));
break;
case 18:
this.$ = INSTRUCCION.Llamadas($$[$0-3], $$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 19:
this.$ = INSTRUCCION.Llamadas($$[$0-2], null,this._$.first_line, (this._$.first_column+1));
break;
case 20: case 23:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 22:
this.$=$$[$0]
break;
case 25:
this.$ = INSTRUCCION.nuevaPARAMETRO($$[$0],$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 26:
this.$ = INSTRUCCION.nuevaPARAMETRO_LV($$[$0],TIPO_VALOR.VECTOR, $$[$0-3], this._$.first_line, (this._$.first_column+1));
break;
case 27:
this.$ = INSTRUCCION.nuevaPARAMETRO_LV($$[$0],TIPO_VALOR.LISTA, $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 30:
this.$ = [];var nuevo=new ERRORES(TIPO_ERROR.SINTACTICO,"Error recuperado con: "+yytext,this._$.first_line, (this._$.first_column+1));lista_Errores.push(nuevo);
break;
case 34: case 105:
this.$ = $$[$0-1];
break;
case 35:
this.$ = INSTRUCCION.nuevaASIGNACION_InDe($$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 38:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-1], null, $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 39:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line, (this._$.first_column+1));
break;
case 42:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 46:
this.$ = INSTRUCCION.nuevaDECLARACION_V($$[$0-7], $$[$0-2],null,TIPO_VALOR.VECTOR ,$$[$0-10], this._$.first_line, (this._$.first_column+1));
break;
case 47:
this.$ = INSTRUCCION.nuevaDECLARACION_V($$[$0-5], 0,$$[$0-2],TIPO_VALOR.VECTOR, $$[$0-8], this._$.first_line, (this._$.first_column+1));
break;
case 48:
this.$ = INSTRUCCION.nuevoMODIFICACIONVector($$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 49:
this.$ = INSTRUCCION.nuevaDECLARACION_V($$[$0-7], 0,null,TIPO_VALOR.LISTA ,$$[$0-9], this._$.first_line, (this._$.first_column+1));
break;
case 50:
this.$ = INSTRUCCION.nuevaDECLARACION_V($$[$0-6], 0,INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0-2], TIPO_OPERACION.TOCHARARRAY, this._$.first_line, (this._$.first_column+1)),TIPO_VALOR.LISTA ,$$[$0-8], this._$.first_line, (this._$.first_column+1));
break;
case 51:
this.$ = INSTRUCCION.nuevoMODIFICACION_L($$[$0-8],$$[$0-5],$$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 52:
this.$ = INSTRUCCION.nuevoAGREGAR_LISTA($$[$0-6],$$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 53: case 58:
this.$ = TIPO_DATO.DECIMAL
break;
case 54:
this.$ = TIPO_DATO.CADENA
break;
case 55:
this.$ = TIPO_DATO.BANDERA
break;
case 56: case 59:
this.$ = TIPO_DATO.ENTERO
break;
case 57: case 60:
this.$ = TIPO_DATO.CARACTER
break;
case 61:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 62:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 63:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-7],$$[$0-6], $$[$0-4],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 64:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-6],$$[$0-5], $$[$0-3],[] , this._$.first_line,(this._$.first_column+1));
break;
case 67:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-2], $$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 68:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 69:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 70:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 71:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-3], [] , this._$.first_line,(this._$.first_column+1));
break;
case 72:
this.$ = new INSTRUCCION.nuevoDOWhile($$[$0-2], $$[$0-6] , this._$.first_line,(this._$.first_column+1));
break;
case 73:
this.$ = new INSTRUCCION.nuevoDOWhile($$[$0-2], [] , this._$.first_line,(this._$.first_column+1));
break;
case 74:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4],$$[$0-1], this._$.first_line,(this._$.first_column+1));
break;
case 76:
 this.$ = INSTRUCCION.nuevoListaCasos($$[$0]);
break;
case 77:
 this.$ = INSTRUCCION.nuevoCaso($$[$0-2],$$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
case 78:
 this.$ = INSTRUCCION.nuevoCasoDef($$[$0], this._$.first_line,(this._$.first_column+1)); 
break;
case 79:
 this.$ = INSTRUCCION.nuevoCaso($$[$0-1],[], this._$.first_line,(this._$.first_column+1)); 
break;
case 80:
 this.$ = INSTRUCCION.nuevoCasoDef([], this._$.first_line,(this._$.first_column+1)); 
break;
case 81:
 this.$ = INSTRUCCION.nuevoELSEIF($$[$0-5],$$[$0-2],$$[$0], this._$.first_line,(this._$.first_column+1));
break;
case 82:
 this.$ = INSTRUCCION.nuevoELSEIF($$[$0-4],[],$$[$0], this._$.first_line,(this._$.first_column+1));
break;
case 84:
 this.$ = INSTRUCCION.nuevoListaELSEIF($$[$0]);
break;
case 85:
 this.$ = INSTRUCCION.nuevoOP_ELSEIF($$[$0-4],$$[$0-1], this._$.first_line,(this._$.first_column+1)); 
break;
case 86:
 this.$ = INSTRUCCION.nuevoELSEIF_Def($$[$0-1], this._$.first_line,(this._$.first_column+1)); 
break;
case 87:
 this.$ = INSTRUCCION.nuevoOP_ELSEIF($$[$0-3],[], this._$.first_line,(this._$.first_column+1)); 
break;
case 88:
 this.$ = INSTRUCCION.nuevoELSEIF_Def([], this._$.first_line,(this._$.first_column+1)); 
break;
case 89:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 90:
this.$ = new INSTRUCCION.nuevoIf($$[$0-3], [] , this._$.first_line,(this._$.first_column+1));
break;
case 92:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOCHARARRAY, this._$.first_line, (this._$.first_column+1));
break;
case 93:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH, this._$.first_line, (this._$.first_column+1));
break;
case 94:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LOWER, this._$.first_line, (this._$.first_column+1));
break;
case 95:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.UPPER, this._$.first_line, (this._$.first_column+1));
break;
case 96:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE, this._$.first_line, (this._$.first_column+1));
break;
case 97:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND, this._$.first_line, (this._$.first_column+1));
break;
case 98:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF, this._$.first_line, (this._$.first_column+1));
break;
case 106:
this.$ = new INSTRUCCION.nuevoBREAK(this._$.first_line, (this._$.first_column+1));
break;
case 107:
this.$ = new INSTRUCCION.nuevoCONTINUE(this._$.first_line, (this._$.first_column+1));
break;
case 108:
this.$ = new INSTRUCCION.nuevoRETURN(null,this._$.first_line, (this._$.first_column+1));
break;
case 109:
this.$ = new INSTRUCCION.nuevoRETURN($$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 110:
 this.$ = new INSTRUCCION.nuevoPRINT($$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 111:
 this.$ = new INSTRUCCION.nuevoPRINT("", this._$.first_line, (this._$.first_column+1));
break;
case 112:
 this.$ = new INSTRUCCION.nuevoCASTEO($$[$0-2],$$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 113:
 this.$ = new INSTRUCCION.nuevoCASTEO(TIPO_DATO.CADENA,$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 114:
this.$ = INSTRUCCION.nuevoOperacionTernario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 115: case 143:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.CADENA, this._$.first_line, (this._$.first_column+1));
break;
case 116: case 144:
this.$ = INSTRUCCION.nuevoVALOR( $$[$0], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1));
break;
case 117:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 118:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 119:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION, this._$.first_line, (this._$.first_column+1));
break;
case 120:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION, this._$.first_line, (this._$.first_column+1));
break;
case 121:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA, this._$.first_line, (this._$.first_column+1));
break;
case 122:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO, this._$.first_line, (this._$.first_column+1));
break;
case 123:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0],TIPO_OPERACION.NEGACION, this._$.first_line, (this._$.first_column+1));
break;
case 124:
this.$ = $$[$0-1]
break;
case 125:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 126:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 127:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 128:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 129:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 130:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 131:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 132:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 133:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 134: case 135: case 138: case 139:
this.$=$$[$0];
break;
case 136:
this.$ = INSTRUCCION.nuevoAccespVector( $$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 137:
this.$ = INSTRUCCION.nuevoAccesLISTA( $$[$0-5], $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 140:
this.$ = INSTRUCCION.nuevoVALOR( Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1));
break;
case 141:
this.$ = INSTRUCCION.nuevoVALOR( true, TIPO_VALOR.BANDERA, this._$.first_line, (this._$.first_column+1));
break;
case 142:
this.$ = INSTRUCCION.nuevoVALOR( false, TIPO_VALOR.BANDERA,this._$.first_line, (this._$.first_column+1));
break;
case 145:
this.$ = INSTRUCCION.nuevoVALOR(Number($$[$0]), TIPO_VALOR.DECIMAL,this._$.first_line, (this._$.first_column+1));
break;
case 146:
this.$ = INSTRUCCION.nuevoVALOR($$[$0], TIPO_VALOR.CARACTER,this._$.first_line, (this._$.first_column+1));
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,16:9,21:$V3,29:$V4,38:10,39:11,40:14,41:15,42:16,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,8:5,9:6,10:$V1,11:$V2,16:9,21:$V3,29:$V4,38:10,39:11,40:14,41:15,42:16,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),{11:[1,25]},{14:[1,26]},{11:[1,27],27:$Vb},o($Vc,[2,40]),o($Vc,[2,41]),{11:[1,29]},{27:[1,31],37:$Vd,45:$Ve},o($Vc,[2,43]),o($Vc,[2,44]),o($Vc,[2,45]),o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,56]),o($Vf,[2,57]),{30:[1,33]},{1:[2,1]},o($Va,[2,2]),{12:[1,34]},o($Va,[2,9]),{12:[1,37],14:$Vg,37:$Vh},{28:[1,38]},{12:[1,39]},{11:$Vi,12:$Vj,22:48,25:40,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:64,27:[1,65],34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{46:[1,66]},{16:67,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{11:$Vi,12:$Vj,13:[1,68],15:69,22:48,24:70,25:71,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vc,[2,38]),{11:$Vi,12:$Vj,22:48,25:72,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{13:[1,73],16:76,20:74,26:75,29:$VA,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{11:[1,78]},{13:[1,79],16:76,20:80,26:75,29:$VA,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{14:[1,81],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:97,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:98,34:45,44:$Vk,47:[1,100],50:[1,101],51:[1,102],52:99,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:103,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($VQ,$VR),o($VQ,$VS),o($VQ,$VT,{12:$VU,27:[1,104],53:$VV,54:$VW}),o($VQ,[2,138]),o($VQ,$VX),o($VQ,[2,140]),o($VQ,[2,141]),o($VQ,[2,142]),o($VQ,[2,143]),o($VQ,[2,145]),o($VQ,[2,146]),o($VQ,[2,91]),{12:[1,108]},{12:[1,109]},{12:[1,110]},{12:[1,111]},{12:[1,112]},{12:[1,113]},{12:[1,114]},{12:[1,115]},{28:[1,116],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:117,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{12:[1,118]},{31:[1,119]},{14:[1,120]},{13:[1,121],23:$VY},o($VZ,[2,21]),o($VZ,[2,22],{30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP}),{14:[1,123],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{17:[1,124]},{13:[1,125],23:$V_},o($V$,[2,24]),{11:[1,127],27:[1,128]},{30:[1,129]},{37:[1,130]},{17:[1,131]},{13:[1,132],23:$V_},o($Vc,[2,42]),{11:$Vi,12:$Vj,22:48,25:133,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:134,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:135,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:136,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:137,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:138,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:139,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:140,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:141,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:142,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:143,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:144,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:145,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:146,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:147,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($VQ,[2,123]),{13:[1,148],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,149]},{13:[2,58]},{13:[2,59]},{13:[2,60]},o($V01,[2,133],{30:$VB,31:$VC,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN}),{11:$Vi,12:$Vj,22:48,25:150,27:[1,151],34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($VQ,[2,61]),o($VQ,[2,62]),{11:$Vi,12:$Vj,13:[1,153],15:152,22:48,24:70,25:71,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:154,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:[1,157],79:155,92:[1,156]},{11:$Vi,12:$Vj,22:48,25:158,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:159,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:160,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:161,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:162,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:163,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{37:$V11},{28:[1,165],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:166,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:[1,167]},o($Va,[2,7]),{14:[1,168]},{11:$Vi,12:$Vj,22:48,24:169,25:71,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vc,[2,39]),{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:170,19:[1,171],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{17:[1,200]},{16:76,26:201,29:$VA,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($V$,[2,25]),{28:[1,202]},{16:203,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{17:[1,205],43:[1,204]},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:206,19:[1,207],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{17:[1,208]},o($Vd1,[2,117],{95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vd1,[2,118],{95:$VG,96:$VH,97:$VI,98:$VJ}),o($Ve1,[2,119],{97:$VI}),o($Ve1,[2,120],{97:$VI}),o($VQ,[2,121]),o($Ve1,[2,122],{97:$VI}),o($Vf1,[2,125],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vf1,[2,126],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vf1,[2,127],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vf1,[2,128],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vf1,[2,129],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o($Vf1,[2,130],{93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ}),o([13,14,19,23,28,68,91,103],[2,131],{30:$VB,31:$VC,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,104:$VP}),o($V01,[2,132],{30:$VB,31:$VC,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN}),{30:$VB,31:$VC,68:[1,209],91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($VQ,[2,124]),{11:$Vi,12:$Vj,22:48,25:210,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{28:[1,211],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:212,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{13:[1,213],23:$VY},o($VQ,[2,19]),{13:[1,214],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,215]},{13:[2,115]},{13:[2,116]},{13:[1,216],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,217],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,218],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,219],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,220],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,221],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:222,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{28:[1,223]},{13:[1,224],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{37:[1,225]},o($Va,[2,8]),o($VZ,[2,20]),{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,226],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Va,[2,14]),o($Vg1,[2,29]),{14:[1,228]},o($Vg1,[2,31]),o($Vg1,[2,32]),o($Vg1,[2,33]),o($Vh1,$VX,{14:[1,229]}),o($Vh1,$VS,{14:[1,230]}),o($Vg1,[2,36]),o($Vg1,[2,37]),{11:[1,231],27:$Vb},o($Vg1,[2,99]),o($Vg1,[2,100]),o($Vg1,[2,101]),o($Vg1,[2,102]),o($Vg1,[2,103]),o($Vg1,[2,104]),o($Vh1,$VR,{14:[1,232]}),o($Vh1,$VT,{12:$VU,27:[1,233],37:$Vd,45:$Ve,53:$VV,54:$VW}),{14:[1,234]},{14:[1,235]},{11:$Vi,12:$Vj,14:[1,236],22:48,25:237,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{12:[1,238]},{12:[1,239]},{12:[1,240]},{12:[1,241]},{12:[1,242]},{17:[1,243]},{30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:244,19:[1,245],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($V$,[2,23]),{11:[1,246]},{31:[1,247]},{16:248,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{11:$Vi,12:$Vj,15:249,22:48,24:70,25:71,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,250],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Va,[2,16]),{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:251,19:[1,252],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:253,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vi1,[2,112],{30:$VB,31:$VC,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP}),o($VQ,$Vj1),{28:[1,254],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($VQ,[2,18]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,95]),o($VQ,[2,96]),o($VQ,[2,97]),o($VQ,[2,98]),o($VQ,[2,113]),{14:[1,255],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{37:$Vk1},{14:[1,257]},{43:[1,258],44:[1,259]},o($Va,[2,10]),o($Vg1,[2,28]),o($Vg1,[2,30]),o($Vg1,[2,34]),o($Vg1,[2,35]),{14:$Vg,37:$Vh},o($Vg1,[2,105]),{11:$Vi,12:$Vj,22:48,25:260,27:[1,261],34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vg1,[2,106]),o($Vg1,[2,107]),o($Vg1,[2,108]),{14:[1,262],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,13:[1,264],22:48,25:263,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:265,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:$Vi,12:$Vj,22:48,25:266,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{7:268,9:269,11:$V2,16:181,29:$V4,38:10,39:11,40:14,41:15,42:16,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,57:267},{11:$Vi,12:$Vj,22:48,25:270,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:271,19:[1,272],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,273],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Va,[2,15]),o($V$,[2,26]),{11:[1,274]},{27:[1,275]},{19:[1,276],23:$VY},o($Va,[2,12]),{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,277],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Va,[2,17]),o($Vi1,[2,114],{30:$VB,31:$VC,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP}),{28:[1,278]},o($Vc,[2,48]),{11:$Vi,12:$Vj,22:48,25:279,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vc,[2,52]),{29:[1,280]},{12:[1,281]},{28:[1,282],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:283,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vg1,[2,109]),{13:[1,284],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{14:[1,285]},{13:[1,286],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{13:[1,287],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{11:$Vi,12:$Vj,22:48,25:288,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vl1,[2,65]),o($Vl1,[2,66]),{13:[1,289],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,290],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{60:[1,291]},o($Va,[2,11]),o($V$,[2,27]),{11:$Vi,12:$Vj,22:48,25:292,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{14:[1,293]},o($Va,[2,13]),o($VQ,$Vm1),{14:[1,294],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{30:[1,295]},{11:$Vi,12:$Vj,22:48,25:296,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vh1,$Vj1,{37:$V11}),{28:[1,297],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{14:[1,298]},o($Vg1,[2,111]),{17:[1,299]},{17:[1,300]},{14:[1,301],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{17:[1,302]},{60:[1,303]},{12:[1,304]},{28:[1,305],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($Vc,[2,47]),o($Vc,[2,51]),{16:306,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{13:[1,307],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{28:[1,308]},o($Vg1,[2,110]),{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:309,19:[1,310],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:311,19:[1,312],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{11:[1,314],58:313},{65:315,66:316,67:$Vn1,69:$Vo1},{12:[1,319]},{11:$Vi,12:$Vj,22:48,25:320,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{14:[1,321]},{31:[1,322]},{14:[1,323]},o($Vh1,$Vm1,{37:$Vk1}),{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,324],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vg1,[2,71]),{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,325],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vg1,[2,90],{72:326,73:327,74:$Vp1}),{13:[1,329]},{37:[1,330],53:[1,331],54:[1,332]},{19:[1,333],66:334,67:$Vn1,69:$Vo1},o($Vq1,[2,76]),{11:$Vi,12:$Vj,22:48,25:335,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{68:[1,336]},{11:$Vi,12:$Vj,22:48,25:337,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{13:[1,338],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($Vc,[2,46]),{14:[1,339]},o($Vc,[2,50]),o($Vg1,[2,70]),o($Vg1,[2,89],{73:327,72:340,74:$Vp1}),o($Vg1,[2,82],{73:341,74:$Vp1}),o($Vr1,[2,84]),{17:[1,343],71:[1,342]},{17:[1,344]},{11:$Vi,12:$Vj,22:48,25:345,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{13:[2,68]},{13:[2,69]},o($Vg1,[2,74]),o($Vq1,[2,75]),{30:$VB,31:$VC,68:[1,346],91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($Vq1,[2,80],{38:10,39:11,40:14,41:15,42:16,76:47,77:55,32:172,7:174,33:175,9:176,22:177,34:178,35:179,36:180,16:181,59:182,75:183,70:184,55:185,63:186,61:187,85:188,25:199,18:347,2:$V21,11:$V31,12:$Vj,29:$V4,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,56:$V41,60:$V51,62:$V61,64:$V71,71:$V81,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz}),{13:[1,348],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},{14:[1,349]},o($Vc,[2,49]),o($Vg1,[2,81],{73:341,74:$Vp1}),o($Vr1,[2,83]),{12:[1,350]},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:351,19:[1,352],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:353,19:[1,354],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{13:[2,67],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($Vq1,[2,79],{38:10,39:11,40:14,41:15,42:16,76:47,77:55,32:172,7:174,33:175,9:176,22:177,34:178,35:179,36:180,16:181,59:182,75:183,70:184,55:185,63:186,61:187,85:188,25:199,18:355,2:$V21,11:$V31,12:$Vj,29:$V4,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,56:$V41,60:$V51,62:$V61,64:$V71,71:$V81,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz}),o($Vq1,[2,78],{38:10,39:11,40:14,41:15,42:16,76:47,77:55,7:174,33:175,9:176,22:177,34:178,35:179,36:180,16:181,59:182,75:183,70:184,55:185,63:186,61:187,85:188,25:199,32:227,11:$V31,12:$Vj,29:$V4,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,56:$V41,60:$V51,62:$V61,64:$V71,71:$V81,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz}),{14:[1,356]},o($Vg1,[2,73]),{11:$Vi,12:$Vj,22:48,25:357,34:45,44:$Vk,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:44,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,358],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vr1,[2,88]),{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,359],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vg1,[2,64]),o($Vq1,[2,77],{38:10,39:11,40:14,41:15,42:16,76:47,77:55,7:174,33:175,9:176,22:177,34:178,35:179,36:180,16:181,59:182,75:183,70:184,55:185,63:186,61:187,85:188,25:199,32:227,11:$V31,12:$Vj,29:$V4,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,56:$V41,60:$V51,62:$V61,64:$V71,71:$V81,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz}),o($Vg1,[2,72]),{13:[1,360],30:$VB,31:$VC,91:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM,102:$VN,103:$VO,104:$VP},o($Vr1,[2,86]),o($Vg1,[2,63]),{17:[1,361]},{2:$V21,7:174,9:176,11:$V31,12:$Vj,16:181,18:362,19:[1,363],22:177,25:199,29:$V4,32:172,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},{7:174,9:176,11:$V31,12:$Vj,16:181,19:[1,364],22:177,25:199,29:$V4,32:227,33:175,34:178,35:179,36:180,38:10,39:11,40:14,41:15,42:16,44:$Vk,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,55:185,56:$V41,59:182,60:$V51,61:187,62:$V61,63:186,64:$V71,70:184,71:$V81,75:183,76:47,77:55,78:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:188,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vr,92:$Vs,94:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz},o($Vr1,[2,87]),o($Vr1,[2,85])],
defaultActions: {23:[2,1],100:[2,58],101:[2,59],102:[2,60],156:[2,115],157:[2,116],331:[2,68],332:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var cadena="";
        var lista_Errores=[];
        const TIPO_ERROR        = require('./controller/Enums/Tipo_Error');
        const ERRORES            = require("./controller/Ambito/S_Error")

        
	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion'); 
	const TIPO_VALOR 	= require('./controller/Enums/TipoValor');
	const TIPO_DATO		= require('./controller/Enums/TipoDato');
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 43
break;
case 4:return 50
break;
case 5:return 47
break;
case 6:return 49
break;
case 7:return 51
break;
case 8:return 48
break;
case 9:return 107
break;
case 10:return 108
break;
case 11:return 29
break;
case 12:return 46
break;
case 13:return 71
break;
case 14:return 74
break;
case 15:return 64
break;
case 16:return 67
break;
case 17:return 69
break;
case 18:return 86
break;
case 19:return 60
break;
case 20:return 56
break;
case 21:return 62
break;
case 22:return 87
break;
case 23:return 88
break;
case 24:return 21
break;
case 25:return 89
break;
case 26:return 80
break;
case 27:return 81
break;
case 28:return 78
break;
case 29:return 82
break;
case 30:return 83
break;
case 31:return 84
break;
case 32:return 90
break;
case 33:return 44
break;
case 34:return 10
break;
case 35:return 99
break;
case 36:return 37
break;
case 37:return 100
break;
case 38:return 101
break;
case 39:return 30
break;
case 40:return 102
break;
case 41:return 31
break;
case 42:return 91
break;
case 43:return 68
break;
case 44:return 103
break;
case 45:return 104
break;
case 46:return 105
break;
case 47:return 12
break;
case 48:return 13
break;
case 49:return 53
break;
case 50:return 54
break;
case 51:return 97
break;
case 52:return 94
break;
case 53:return 93
break;
case 54:return 95
break;
case 55:return 96
break;
case 56:return 98
break;
case 57:return 14
break;
case 58:return 45
break;
case 59:return 17
break;
case 60:return 19
break;
case 61:return 27
break;
case 62:return 28
break;
case 63:return 23
break;
case 64:return 109;
break;
case 65:return 106;
break;
case 66:return 11
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+=" ";
break;
case 72:cadena+="\t";
break;
case 73:cadena+="\\";
break;
case 74:cadena+="\'";
break;
case 75:yy_.yytext=cadena; this.popState(); return 92;
break;
case 76:return 110
break;
case 77:return 5
break;
case 78:var nuevo=new ERRORES(TIPO_ERROR.LEXICO,"Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);lista_Errores.push(nuevo); return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\^)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}